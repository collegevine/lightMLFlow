% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/project.R
\name{set_git_tracking_tags}
\alias{set_git_tracking_tags}
\title{Set Git tracking tags outside of an MLFlow Project}
\usage{
set_git_tracking_tags(
  run_id = get_active_run_id(),
  client = mlflow_client(),
  git_repo_url = Sys.getenv("GIT_REPO_URL"),
  git_repo_subdir,
  source_git_commit = system("git rev-parse HEAD", intern = TRUE),
  source_git_branch = system("git rev-parse --abbrev-ref HEAD", intern = TRUE),
  project_entrypoint = "main",
  project_backend = "local"
)
}
\arguments{
\item{run_id}{An MLFlow run ID. Auto-generated if missing}

\item{client}{An MLFlow client. Auto-generated if missing}

\item{git_repo_url}{A URL for the Git repo where the code is being run from
This is expected to be of the form \verb{https://<<GITHUB_TOKEN>>@github.com/<<org>>/<<repo>>}}

\item{git_repo_subdir}{The subdirectory in the repo where your code lives}

\item{source_git_commit}{A git commit hash to tag a run with. Defaults to \code{git2r::revparse_single(".", revision = "HEAD")$sha}}

\item{source_git_branch}{The git branch the code is running on. Defaults to \code{system("git rev-parse --abbrev-ref HEAD", intern = TRUE)} (i.e. the current branch)}

\item{project_entrypoint}{An entrypoint for the project. Defaults to \code{"main"}}

\item{project_backend}{A backend for the project. Defaults to \code{"local"}}
}
\value{
Returns a list of tags for the \code{run_id}
}
\description{
This is a utility to make it easier to set tracking tags. Basically, it tricks
MLFlow into thinking the code is running from an MLFlow Project when it's not,
so you get nice Git tracking in the UI without needing an \code{MLProject} file or
to clone a repo to get the same benefits.
}
\details{
This also makes it easier to have MLFlow play nicely with \code{renv}.
}
